{"version":3,"sources":["african-pe-hi.wav","african-pe-lo.wav","african-pe-med.wav","clap.wav","clap10.wav","Clap808.wav","claps-w_cymb.WAV","cleap-real-2-verb2cleap-real.wav","verby-cajon-lo.wav","Components/DrumKeys.js","Components/Controls.js","Components/Console.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DrumKeys","className","this","props","renderButtons","React","Component","Controls","id","display","Console","audioFiles","sound","sound1","label","sound2","sound3","sound4","sound5","sound6","sound7","sound8","sound9","App","someFunc","soundObject","soundPlay","handleclick","src","Howl","play","dis","setState","map","index","key","onClick","state","document","addEventListener","event","Howler","volume","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ce9113f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/african-pe-hi.d5759e1f.wav\";","module.exports = __webpack_public_path__ + \"static/media/african-pe-lo.65594122.wav\";","module.exports = __webpack_public_path__ + \"static/media/african-pe-med.9f75920e.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap.526ed20c.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap10.9728f69a.wav\";","module.exports = __webpack_public_path__ + \"static/media/Clap808.b402ee08.wav\";","module.exports = __webpack_public_path__ + \"static/media/claps-w_cymb.d902aa53.WAV\";","module.exports = __webpack_public_path__ + \"static/media/cleap-real-2-verb2cleap-real.7a308aa0.wav\";","module.exports = __webpack_public_path__ + \"static/media/verby-cajon-lo.dd271a19.wav\";","import React from 'react';\r\nimport '../App.css';\r\n\r\nclass DrumKeys extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className=\"DrumKeys\">\r\n        {this.props.renderButtons()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumKeys;","import React from 'react';\r\nimport '../App.css';\r\n\r\nclass Controls extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className=\"Controls\" id=\"display\">\r\n          <p>{this.props.display}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Controls;","import React from 'react';\r\nimport '../App.css';\r\nimport DrumKeys from './DrumKeys';\r\nimport Controls from './Controls';\r\n\r\nclass Console extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className=\"Container\" id=\"drum-machine\">\r\n        <DrumKeys renderButtons={this.props.renderButtons}/>\r\n        <Controls display={this.props.display}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Console;","import React from 'react';\nimport './App.css';\nimport Console from './Components/Console';\nimport sound1 from './african-pe-hi.wav';\nimport sound2 from './african-pe-lo.wav';\nimport sound3 from './african-pe-med.wav';\nimport sound4 from './clap.wav';\nimport sound5 from './clap10.wav';\nimport sound6 from './Clap808.wav';\nimport sound7 from './claps-w_cymb.WAV';\nimport sound8 from './cleap-real-2-verb2cleap-real.wav';\nimport sound9 from './verby-cajon-lo.wav';\n\nimport {Howl, Howler} from 'howler';\n\nconst audioFiles = [\n  {sound: sound1, label: 'Q drum-pad', display: 'african-pe-hi'},\n  {sound: sound2, label: 'W drum-pad', display: 'african-pe-lo'},\n  {sound: sound3, label: 'E drum-pad', display: 'african-pe-med'},\n  {sound: sound4, label: 'A drum-pad', display: 'clap'},\n  {sound: sound5, label: 'S drum-pad', display: 'clap10'},\n  {sound: sound6, label: 'D drum-pad', display: 'Clap808'},\n  {sound: sound7, label: 'Z drum-pad', display: 'claps-w_cymb'},\n  {sound: sound8, label: 'X drum-pad', display: 'cleap-real-2-verb2cleap-real'},\n  {sound: sound9, label: 'C drum-pad', display: 'verby-cajon-lo.wav'}\n]\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       display: ''\n    }\n  }\n\n  someFunc = (soundObject) =>{\n    this.soundPlay(soundObject.sound);\n    this.handleclick(soundObject.display);\n  }\n  \n  soundPlay = (src) => {\n    const sound = new Howl({\n      src\n    })\n    sound.play();\n  } \n\n  handleclick = (dis) => {\n    this.setState({\n      display: dis\n    })\n  }\n\n  renderButtons = () => {\n    return audioFiles.map((soundObject, index) => {\n      return(\n        <button key={index} onClick={() => this.someFunc(soundObject)} className={soundObject.label}>  \n        {soundObject.label[0]}\n        </button>\n      )\n    })\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', (event) => {\n      switch (event.key){\n        case 'q':\n          this.someFunc(audioFiles[0]);\n          break;\n        case 'w':\n          this.someFunc(audioFiles[1]);\n          break;\n        case 'e':\n          this.someFunc(audioFiles[2]);\n          break;\n        case 'a':\n          this.someFunc(audioFiles[3]);\n          break;\n        case 's':\n          this.someFunc(audioFiles[4]);\n          break;\n        case 'd':\n          this.someFunc(audioFiles[5]);\n          break;\n        case 'z':\n          this.someFunc(audioFiles[6]);\n          break;\n        case 'x':\n          this.someFunc(audioFiles[7]);\n          break;\n        case 'c':\n          this.someFunc(audioFiles[8]);\n          break;\n      }\n    })\n  }\n  \n  render(){\n    Howler.volume(1.0);\n    return (\n      <div>\n        <Console display={this.state.display} renderButtons={this.renderButtons} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}